EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
calc-sum.com_ -- emu8086 assembler version: 4.08  
 
[ 09.04.2023  --  15:30:26 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       name "calc-sum"
[   2]        :                                       
[   3]        :                                       org 100h ; directive make tiny com file.
[   4]        :                                       
[   5]        :                                       ; calculate the sum of elements in vector,
[   6]        :                                       ; store result in m and print it in binary code.
[   7]        :                                       
[   8]        :                                       ; number of elements:
[   9]    0100: B9 05 00                              mov cx, 5
[  10]        :                                       
[  11]        :                                       ; al will store the sum:
[  12]    0103: B0 00                                 mov al, 0
[  13]        :                                       
[  14]        :                                       ; bx is an index:
[  15]    0105: BB 00 00                              mov bx, 0
[  16]        :                                       
[  17]        :                                       ; sum elements:
[  18]    0108: 02 87 41 01                           next: add al, vector[bx]
[  19]        :                                       
[  20]        :                                       ; next byte:
[  21]    010C: 43                                    inc bx
[  22]        :                                       
[  23]        :                                       ; loop until cx=0:
[  24]    010D: E2 F9                                 loop next
[  25]        :                                       
[  26]        :                                       
[  27]        :                                       ; store result in m:
[  28]    010F: A2 46 01                              mov m, al
[  29]        :                                       
[  30]        :                                       
[  31]        :                                       ; print result in binary:
[  32]    0112: 8A 1E 46 01                           mov bl, m
[  33]    0116: B9 08 00                              mov cx, 8
[  34]    0119: B4 02                                 print: mov ah, 2   ; print function.
[  35]    011B: B2 30                                 mov dl, '0'
[  36]    011D: F6 C3 80                              test bl, 10000000b  ; test first bit.
[  37]    0120: 74 02                                 jz zero
[  38]    0122: B2 31                                 mov dl, '1'
[  39]    0124: CD 21                                 zero:  int 21h
[  40]    0126: D0 E3                                 shl bl, 1
[  41]    0128: E2 EF                                 loop print
[  42]        :                                       ; print binary suffix:
[  43]    012A: B2 62                                 mov dl, 'b'
[  44]    012C: CD 21                                 int 21h
[  45]        :                                       
[  46]        :                                       
[  47]        :                                       
[  48]    012E: B2 0A                                 mov dl, 0ah ; new line.
[  49]    0130: CD 21                                 int 21h
[  50]    0132: B2 0D                                 mov dl, 0dh ; carrige return.
[  51]    0134: CD 21                                 int 21h
[  52]        :                                       
[  53]        :                                       
[  54]        :                                       ; print result in decimal:
[  55]    0136: A0 46 01                              mov al, m
[  56]    0139: E8 0B 00                              call print_al
[  57]        :                                       
[  58]        :                                       
[  59]        :                                       
[  60]        :                                       
[  61]        :                                       ; wait for any key press:
[  62]    013C: B4 00                                 mov ah, 0
[  63]    013E: CD 16                                 int 16h
[  64]        :                                       
[  65]        :                                       
[  66]        :                                       
[  67]    0140: C3                                    ret
[  68]        :                                       
[  69]        :                                       ; variables:
[  70]    0141: 05 04 05 02 01                        vector db 5, 4, 5, 2, 1
[  71]    0146: 00                                    m db 0
[  72]        :                                       
[  73]        :                                       
[  74]    0147:                                       print_al proc
[  75]    0147: 3C 00                                 cmp al, 0
[  76]    0149: 75 09                                 jne print_al_r
[  77]    014B: 50                                    push ax
[  78]    014C: B0 30                                 mov al, '0'
[  79]    014E: B4 0E                                 mov ah, 0eh
[  80]    0150: CD 10                                 int 10h
[  81]    0152: 58                                    pop ax
[  82]    0153: C3                                    ret
[  83]    0154:                                       print_al_r:
[  84]    0154: 60                                    pusha
[  85]    0155: B4 00                                 mov ah, 0
[  86]    0157: 3D 00 00                              cmp ax, 0
[  87]    015A: 74 11                                 je pn_done
[  88]    015C: B2 0A                                 mov dl, 10
[  89]    015E: F6 F2                                 div dl
[  90]    0160: E8 F1 FF                              call print_al_r
[  91]    0163: 8A C4                                 mov al, ah
[  92]    0165: 04 30                                 add al, 30h
[  93]    0167: B4 0E                                 mov ah, 0eh
[  94]    0169: CD 10                                 int 10h
[  95]    016B: EB 00                                 jmp pn_done
[  96]    016D:                                       pn_done:
[  97]    016D: 61                                    popa
[  98]    016E: C3                                    ret
[  99]        :                                       endp
[ 100]        :                                       
 
===================================================================================================
 




===================================================================================================
