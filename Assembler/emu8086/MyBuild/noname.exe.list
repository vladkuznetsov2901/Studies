EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
noname.exe -- emu8086 assembler version: 4.08  
 
[ 02.04.2023  --  16:52:56 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       data segment
[   2]    0000: 0A 00 18 00 4C 00 DF 01 A5 FE 19 01   mass dw 10,24,76,479,-347,281,-24,70,124,97 ; заменяем все dw на db, так как нам потребуется ; обращаться к отдельным байтам массива
                E8 FF 46 00 7C 00 61 00             
[   3]        :                                       data ends
[   4]        :                                       code segment
[   5]        :                                       assume cs: code, ds: data
[   6]    0020:                                       start:
[   7]    0020: B8 00 00                              mov ax, data
[   8]    0023: 8E D8                                 mov ds, ax
[   9]    0025: BB 00 00                              lea bx, mass
[  10]    0028: B9 0A 00                              mov cx, 10
[  11]        :                                       
[  12]    002B:                                       beg:
[  13]    002B: 80 3F 00                              cmp byte ptr [bx], 0
[  14]    002E: 7D 03                                 jge no_change ; если число неотрицательное, пропускаем замену
[  15]    0030: C6 07 00                              mov byte ptr [bx], 0 ; иначе заменяем его на 0
[  16]    0033:                                       no_change:
[  17]    0033: 43                                    inc bx
[  18]    0034: E2 F5                                 loop beg
[  19]        :                                       
[  20]    0036:                                       quit:
[  21]    0036: B4 4C                                 mov ah, 4Ch
[  22]    0038: CD 21                                 int 21h
[  23]        :                                       code ends
[  24]        :                                       end start
[  25]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 3A      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: EE      -   check sum (l.byte)
0013: 19      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 02      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 02      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
